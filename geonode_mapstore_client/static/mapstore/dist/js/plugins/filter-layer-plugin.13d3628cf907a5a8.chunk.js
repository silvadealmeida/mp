"use strict";(self.webpackChunkgeonode_mapstore_client=self.webpackChunkgeonode_mapstore_client||[]).push([[95127],{290675:(n,e,t)=>{t.r(e),t.d(e,{default:()=>f});var r=t(124852),o=t.n(r),l=t(171703),i=t(322843),u=t(640512),a=["onClick","selectedNodes","status","itemComponent","statusTypes"];function c(){return c=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},c.apply(null,arguments)}var s=(0,l.connect)(function(){return{}},{onClick:u.Zq})(function(n){var e,t=n.onClick,r=n.selectedNodes,l=n.status,i=n.itemComponent,u=n.statusTypes,s=function(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t={};for(var r in n)if({}.hasOwnProperty.call(n,r)){if(-1!==e.indexOf(r))continue;t[r]=n[r]}return t}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],-1===e.indexOf(t)&&{}.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}(n,a),f=i,p=null==r||null===(e=r[0])||void 0===e?void 0:e.node;return![u.LAYER].includes(l)||null==p||!p.search||null!=p&&p.error?null:o().createElement(f,c({},s,{glyph:"filter-layer",tooltipId:"toc.layerFilterTooltip",onClick:function(){return t()}}))});const f=(0,i.rx)("FilterLayer",{component:function(){return null},containers:{TOC:[{name:"FilterLayer",target:"toolbar",Component:s,position:6}]}})}}]);